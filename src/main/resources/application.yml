spring:
  application:
    name: realtor-connect
    time-zone: UTC
  profiles:
    active: dev
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: validate
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}/${spring.application.name}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jackson:
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
    serialization:
      write_dates_as_timestamps: false
  flyway:
    baseline-on-migrate: true
  logging:
    level:
      com.kotyk.realtorconnect: info
      org.springframework: info
      org.hibernate: info
      org.flywaydb: info

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    env:
      show-values: ALWAYS
    configprops:
      show-values: ALWAYS

server:
  port: 8080

security.jwt:
  token-ttl: 18000000 # 5 hours
  secret: ${JWT_SECRET}

network:
  hostname: ${APP_DOMAIN:http://localhost:${server.port}}
  swagger-ui-url: ${network.hostname}/swagger-ui/index.html
  verify-email-url: ${network.hostname}/users/verifyEmail/
  defaultAvatarUrl: https://res.cloudinary.com/dhseztjx1/image/upload/v1711873406/logos/realtor_connect_logo_jpg.jpg

scheduler:
  enabled: ${SCHEDULER_ENABLED:true}
  task-pool-size: 10
  thread-name-prefix: rc-scheduled-thread-

openapi:
  title: Realtor Connect
  version: 1.0
  description: It is a tool that gives you, as a realtor, the ability to store your own properties, easily manage them, and share them with potential clients. In turn, users can easily search for the properties they want and communicate with realtors.
  groups:
    userAPIs:
      - /auth/login/**
      - /auth/current/**
      - /auth/register/user/**
      - /users/**
    realtorAPIs:
      - /auth/login/**
      - /auth/current/**
      - /auth/register/realtor/**
      - /realtors/**
      - /users/{id}/avatar
    adminAPIs:
      - /auth/login/**
      - /auth/current/**
      - /users/**
      - /admins/**
      - /admin-panel/**
    otherAPI:
      - /settings/**

email:
  enabled: ${EMAIL_ENABLED:true}
  server:
    credentials:
      username: ${EMAIL_USERNAME}
      password: ${EMAIL_PASSWORD}
    network:
      host: smtp.gmail.com
      port: 587
    properties:
      mail.protocol: smtp
      mail.test-connection: true
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
  debugMode:
    enabled: ${DEBUG_EMAIL_ENABLED:false}
    from: info@realtorconnect.com
    server:
      credentials:
        username: user
        password: user
      network:
        host: localhost
        port: 1025

files:
  client: ${CDN_CLIENT:placeholder}
  allowedContentTypes: [ image/jpeg, image/png ]
  avatar:
    minWidthHeight: 128 # in px
    maxWidthHeight: 512 # in px
    widthHeightForSave: 256 # in px
  realEstatePhoto:
    minWidthHeight: 256 # in px
    maxWidthHeight: 5000 # in px
  multipart:
    maxFileSize: 1MB
    maxRequestSize: 25MB

cloudinary:
  appPrefix: ${CLOUDINARY_APP_PREFIX:}
  cloudinaryUrl: ${CLOUDINARY_URL}

user:
  timeToVerifyEmailInDays: 7
  scheduler:
    delete-unverified-users-cron: "* * */1 * * *" # every hour

realtor:
  plan-configuration:
    free:
      maxPublicRealEstates: 10
    premium:
      maxPublicRealEstates: 25
  daysToNotifyExpiresPremium: [ 1, 7 ]
  scheduler:
    reset-plan-cron: "1 0 0 * * *" # every day at 00:00:01 AM
    send-email-when-premium-expires-cron: "0 0 10 * * *" # every day at 10 AM

real-estate:
  daysForExpireCalled: 14
  scheduler:
    check-called: 60000 # every minute
  photo:
    maxPhotosCount: 24

cache:
  enabled: true
  settings:
    # User
    getUser: 20000
    getUserDto: 20000
    getUserFullDto: 20000
    getListUserFullDto: 10000
    # Realtor
    getRealtorDto: 20000
    getRealtorFullDto: 20000
    getAllRealtorDto: 20000
    # Contact
    getContact: 10000
    getContactDto: 10000
    getListContactDto: 10000
    # Real Estate
    getRealEstate: 20000
    getRealEstateDto: 20000
    getRealEstateFullDto: 20000
    getListRealEstateDto: 10000
    getListRealEstateFullDto: 10000
    # Real Estate Photo
    getPhoto: 10000
    getListPhotoDto: 10000
